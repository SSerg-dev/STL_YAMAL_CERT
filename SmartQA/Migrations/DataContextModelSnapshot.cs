// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartQA.DB;

namespace SmartQA.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("Relational:Sequence:.Sequence_CheckList_Number", "'Sequence_CheckList_Number', '', '1', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.Sequence_Document_Number", "'Sequence_Document_Number', '', '1', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.Sequence_Register_Number", "'Sequence_Register_Number', '', '1', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SmartQA.DB.Models.Auth.AppUser", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AppUser_ID")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<string>("AppUser_Code")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Comment")
                        .HasMaxLength(250);

                    b.Property<Guid>("Created_User_ID");

                    b.Property<DateTimeOffset?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<DateTimeOffset?>("Update_DTS")
                        .IsRequired();

                    b.Property<byte[]>("User_Password")
                        .HasMaxLength(8000);

                    b.HasKey("ID");

                    b.HasIndex("AppUser_Code")
                        .IsUnique();

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.HasIndex("RowStatus");

                    b.ToTable("p_AppUser");

                    b.HasData(
                        new
                        {
                            ID = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            AppUser_Code = "root",
                            Comment = "superuser",
                            Created_User_ID = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Insert_DTS = new DateTimeOffset(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0)),
                            Modified_User_ID = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            RowStatus = 0,
                            Update_DTS = new DateTimeOffset(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0)),
                            User_Password = new byte[] { 154, 188, 48, 112, 67, 142, 69, 201, 80, 125, 104, 193, 197, 212, 204, 212 }
                        });
                });

            modelBuilder.Entity("SmartQA.DB.Models.Auth.AppUser_to_Role", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AppUser_to_Role_ID")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("AppUser_ID");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<DateTimeOffset?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<Guid>("Role_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<DateTimeOffset?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.HasIndex("Role_ID");

                    b.HasIndex("RowStatus");

                    b.HasIndex("AppUser_ID", "Role_ID")
                        .IsUnique();

                    b.ToTable("p_AppUser_to_Role");

                    b.HasData(
                        new
                        {
                            ID = new Guid("c2d77d20-d557-4291-8da8-5b6765256a95"),
                            AppUser_ID = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Created_User_ID = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Insert_DTS = new DateTimeOffset(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0)),
                            Modified_User_ID = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Role_ID = new Guid("ccd8c1ee-f6a8-e811-aa0b-005056947b15"),
                            RowStatus = 0,
                            Update_DTS = new DateTimeOffset(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("SmartQA.DB.Models.Auth.Role", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Role_ID")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<DateTimeOffset?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<string>("Role_Code")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<DateTimeOffset?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.HasIndex("RowStatus");

                    b.ToTable("p_Role");

                    b.HasData(
                        new
                        {
                            ID = new Guid("ccd8c1ee-f6a8-e811-aa0b-005056947b15"),
                            Created_User_ID = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Insert_DTS = new DateTimeOffset(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0)),
                            Modified_User_ID = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Role_Code = "Administrator",
                            RowStatus = 0,
                            Update_DTS = new DateTimeOffset(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("SmartQA.DB.Models.Common.Parameter", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Parameter_ID")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<string>("Description_Rus")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<string>("Parameter_Code")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Parameter_Value")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<DateTimeOffset?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.HasIndex("Parameter_Code")
                        .IsUnique();

                    b.HasIndex("RowStatus");

                    b.ToTable("p_Parameter");

                    b.HasData(
                        new
                        {
                            ID = new Guid("c2a74178-34ae-407d-af20-bcbcf8be649f"),
                            Created_User_ID = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Description_Rus = "UTC часовой пояс строительной площадки",
                            Insert_DTS = new DateTimeOffset(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0)),
                            Modified_User_ID = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Parameter_Code = "SiteTimezone",
                            Parameter_Value = "Ekaterinburg Standard Time",
                            RowStatus = 0,
                            Update_DTS = new DateTimeOffset(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("SmartQA.DB.Models.Common.RowStatus", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnName("RowStatus_ID");

                    b.Property<string>("Description_Eng")
                        .HasMaxLength(255);

                    b.Property<string>("Description_Rus")
                        .HasMaxLength(255);

                    b.Property<string>("Status_Name_Eng")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Status_Name_Rus")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("ID");

                    b.ToTable("p_RowStatus");

                    b.HasData(
                        new
                        {
                            ID = 0,
                            Description_Eng = "Basic row",
                            Description_Rus = "Действующие данные",
                            Status_Name_Eng = "Basic_Row",
                            Status_Name_Rus = "Базовое состояние строки"
                        },
                        new
                        {
                            ID = 120,
                            Description_Eng = "Previous condition of row",
                            Description_Rus = "Предыдущие состояния строки",
                            Status_Name_Eng = "Historical_Row",
                            Status_Name_Rus = "Историческая строка"
                        },
                        new
                        {
                            ID = 200,
                            Description_Eng = "Deleted row",
                            Description_Rus = "Удалённая строка",
                            Status_Name_Eng = "Deleted",
                            Status_Name_Rus = "Удалённая строка"
                        });
                });

            modelBuilder.Entity("SmartQA.DB.Models.Documents.Document", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Document_ID")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<Guid>("DocumentType_ID");

                    b.Property<string>("Document_Code")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("next value for [Sequence_Document_Number]")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("Document_Date")
                        .HasColumnType("date");

                    b.Property<string>("Document_Name")
                        .HasMaxLength(255);

                    b.Property<string>("Document_Number")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("Insert_DTS")
                        .IsRequired();

                    b.Property<bool>("IsActual");

                    b.Property<DateTimeOffset?>("Issue_Date")
                        .IsRequired();

                    b.Property<DateTime?>("Issue_Date_DT")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<Guid?>("Resp_Employee_ID");

                    b.Property<Guid>("Root_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<int?>("TotalSheets");

                    b.Property<DateTimeOffset?>("Update_DTS")
                        .IsRequired();

                    b.Property<int>("VersionNumber");

                    b.HasKey("ID");

                    b.HasAlternateKey("Document_Code");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("DocumentType_ID");

                    b.HasIndex("Modified_User_ID");

                    b.HasIndex("Resp_Employee_ID");

                    b.HasIndex("Root_ID");

                    b.HasIndex("RowStatus");

                    b.HasIndex("Root_ID", "IsActual")
                        .IsUnique()
                        .HasFilter("(IsActual = 1)");

                    b.HasIndex("Root_ID", "VersionNumber")
                        .IsUnique();

                    b.ToTable("p_Document");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Documents.DocumentAttachment", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DocumentAttachment_ID")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<string>("Description");

                    b.Property<Guid>("Document_ID");

                    b.Property<Guid>("FileDesc_ID");

                    b.Property<DateTimeOffset?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<DateTimeOffset?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Document_ID");

                    b.HasIndex("FileDesc_ID")
                        .IsUnique();

                    b.HasIndex("Modified_User_ID");

                    b.HasIndex("RowStatus");

                    b.ToTable("p_DocumentAttachment");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Documents.DocumentProjectNumber", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DocumentProjectNumber_ID")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<DateTimeOffset?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("DocumentProjectNumber_Code")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.HasIndex("RowStatus");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("p_DocumentProjectNumber");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Documents.DocumentStatus", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Document_to_Status_ID")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<DateTimeOffset?>("DTS_End");

                    b.Property<DateTimeOffset?>("DTS_Start")
                        .IsRequired();

                    b.Property<Guid>("Document_ID");

                    b.Property<DateTimeOffset?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<Guid?>("Parent_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<Guid>("Status_ID");

                    b.Property<DateTimeOffset?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Document_ID");

                    b.HasIndex("Modified_User_ID");

                    b.HasIndex("Parent_ID")
                        .IsUnique()
                        .HasFilter("[Parent_ID] IS NOT NULL");

                    b.HasIndex("RowStatus");

                    b.HasIndex("Status_ID");

                    b.HasIndex("Document_ID", "DTS_End")
                        .IsUnique()
                        .HasFilter("(DTS_End is null)");

                    b.ToTable("p_Document_to_Status");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Documents.DocumentType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DocumentType_ID")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<string>("Description")
                        .HasColumnName("Description_Rus")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("DocumentType_Code")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.HasIndex("RowStatus");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("p_DocumentType");

                    b.HasData(
                        new
                        {
                            ID = new Guid("724b20fd-df8d-4b4c-8afc-d54fe796f254"),
                            Created_User_ID = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Insert_DTS = new DateTimeOffset(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0)),
                            Modified_User_ID = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            RowStatus = 0,
                            Title = "N/A",
                            Update_DTS = new DateTimeOffset(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("SmartQA.DB.Models.Documents.Document_to_GOST", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Document_to_GOST_ID")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<Guid>("Document_ID");

                    b.Property<Guid>("GOST_ID");

                    b.Property<DateTimeOffset?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<DateTimeOffset?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("GOST_ID");

                    b.HasIndex("Modified_User_ID");

                    b.HasIndex("RowStatus");

                    b.HasIndex("Document_ID", "GOST_ID")
                        .IsUnique();

                    b.ToTable("p_Document_to_GOST");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Documents.Document_to_PID", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Document_to_PID_ID")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<Guid>("Document_ID");

                    b.Property<DateTimeOffset?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<Guid>("PID_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<DateTimeOffset?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.HasIndex("PID_ID");

                    b.HasIndex("RowStatus");

                    b.HasIndex("Document_ID", "PID_ID")
                        .IsUnique();

                    b.ToTable("p_Document_to_PID");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Documents.GOST", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("GOST_ID")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<string>("Description_Rus")
                        .HasMaxLength(255);

                    b.Property<string>("GOST_Code")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid?>("Marka_ID");

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<DateTimeOffset?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("GOST_Code")
                        .IsUnique();

                    b.HasIndex("Marka_ID");

                    b.HasIndex("Modified_User_ID");

                    b.HasIndex("RowStatus");

                    b.ToTable("p_GOST");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Documents.GOST_to_PID", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("GOST_to_PID_ID")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<Guid>("GOST_ID");

                    b.Property<DateTimeOffset?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<Guid>("PID_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<DateTimeOffset?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.HasIndex("PID_ID");

                    b.HasIndex("RowStatus");

                    b.HasIndex("GOST_ID", "PID_ID")
                        .IsUnique();

                    b.ToTable("p_GOST_to_PID");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Documents.GOST_to_TitleObject", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("GOST_to_TitleObject_ID")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<Guid>("GOST_ID");

                    b.Property<DateTimeOffset?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<Guid>("TitleObject_ID");

                    b.Property<DateTimeOffset?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.HasIndex("RowStatus");

                    b.HasIndex("TitleObject_ID");

                    b.HasIndex("GOST_ID", "TitleObject_ID")
                        .IsUnique();

                    b.ToTable("p_GOST_to_TitleObject");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Documents.Marka", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Marka_ID")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<string>("Description")
                        .HasColumnName("Description_Rus")
                        .HasMaxLength(255);

                    b.Property<string>("Description_Eng")
                        .HasMaxLength(255);

                    b.Property<string>("Engineering_Drawing_Type_Eng")
                        .HasMaxLength(255);

                    b.Property<string>("Engineering_Drawing_Type_Rus")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("Insert_DTS")
                        .IsRequired();

                    b.Property<bool?>("IsPriority");

                    b.Property<bool?>("IsUsedInMatrix");

                    b.Property<string>("Marka_Code_Eng")
                        .HasMaxLength(255);

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<string>("ReportColor")
                        .HasMaxLength(255);

                    b.Property<int?>("ReportOrder");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("Marka_Code")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.HasIndex("RowStatus");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("p_Marka");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Documents.PID", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PID_ID")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<string>("Description_Eng")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<string>("PID_Code")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<DateTimeOffset?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.HasIndex("RowStatus");

                    b.ToTable("p_PID");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Documents.Status", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Status_ID")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<string>("Description_Eng")
                        .HasMaxLength(255);

                    b.Property<string>("Description_Rus")
                        .HasMaxLength(255);

                    b.Property<bool>("EntityLocked");

                    b.Property<DateTimeOffset?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<bool>("ReportColor")
                        .HasMaxLength(255);

                    b.Property<int>("ReportOrder");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<string>("StatusEntity")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Status_Code")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.HasIndex("RowStatus");

                    b.ToTable("p_Status");

                    b.HasData(
                        new
                        {
                            ID = new Guid("5e1a9818-f8a5-481c-20f0-c16d362df87a"),
                            Created_User_ID = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Description_Eng = "Draft",
                            Description_Rus = "Черновик",
                            EntityLocked = false,
                            Insert_DTS = new DateTimeOffset(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0)),
                            Modified_User_ID = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            ReportColor = false,
                            ReportOrder = 0,
                            RowStatus = 0,
                            StatusEntity = "Document",
                            Status_Code = "wDd",
                            Update_DTS = new DateTimeOffset(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0))
                        },
                        new
                        {
                            ID = new Guid("12c12fe0-2085-5d30-87a5-5d98ba3c6ed8"),
                            Created_User_ID = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Description_Eng = "Accepted",
                            Description_Rus = "Действующий",
                            EntityLocked = true,
                            Insert_DTS = new DateTimeOffset(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0)),
                            Modified_User_ID = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            ReportColor = false,
                            ReportOrder = 0,
                            RowStatus = 0,
                            StatusEntity = "Document",
                            Status_Code = "wDa",
                            Update_DTS = new DateTimeOffset(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0))
                        },
                        new
                        {
                            ID = new Guid("ec3dfdb9-2c7a-9a45-9ced-fde8e9fe7617"),
                            Created_User_ID = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Description_Eng = "Draft",
                            Description_Rus = "Черновик",
                            EntityLocked = false,
                            Insert_DTS = new DateTimeOffset(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0)),
                            Modified_User_ID = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            ReportColor = false,
                            ReportOrder = 0,
                            RowStatus = 0,
                            StatusEntity = "Register",
                            Status_Code = "wSCd",
                            Update_DTS = new DateTimeOffset(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0))
                        },
                        new
                        {
                            ID = new Guid("e65bd063-4b28-9174-db6d-83319a90ad76"),
                            Created_User_ID = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Description_Eng = "Review",
                            Description_Rus = "Проверка",
                            EntityLocked = true,
                            Insert_DTS = new DateTimeOffset(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0)),
                            Modified_User_ID = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            ReportColor = false,
                            ReportOrder = 0,
                            RowStatus = 0,
                            StatusEntity = "Register",
                            Status_Code = "wCCuAr",
                            Update_DTS = new DateTimeOffset(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0))
                        },
                        new
                        {
                            ID = new Guid("81f3ef08-bfa7-4176-e0c1-54ef6d687b6b"),
                            Created_User_ID = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Description_Eng = "ComentsExists",
                            Description_Rus = "Выданы замечания",
                            EntityLocked = true,
                            Insert_DTS = new DateTimeOffset(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0)),
                            Modified_User_ID = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            ReportColor = false,
                            ReportOrder = 0,
                            RowStatus = 0,
                            StatusEntity = "Register",
                            Status_Code = "wSCce",
                            Update_DTS = new DateTimeOffset(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0))
                        },
                        new
                        {
                            ID = new Guid("28fe952a-5094-3f4e-96cf-f9cddfae5e74"),
                            Created_User_ID = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Description_Eng = "CommentsIncorporation",
                            Description_Rus = "Устранение замечаний",
                            EntityLocked = false,
                            Insert_DTS = new DateTimeOffset(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0)),
                            Modified_User_ID = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            ReportColor = false,
                            ReportOrder = 0,
                            RowStatus = 0,
                            StatusEntity = "Register",
                            Status_Code = "wSCci",
                            Update_DTS = new DateTimeOffset(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0))
                        },
                        new
                        {
                            ID = new Guid("bcfd9a12-a2d8-f81c-c7d5-d43f190ed507"),
                            Created_User_ID = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Description_Eng = "SecondReview",
                            Description_Rus = "Повторная проверка",
                            EntityLocked = true,
                            Insert_DTS = new DateTimeOffset(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0)),
                            Modified_User_ID = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            ReportColor = false,
                            ReportOrder = 0,
                            RowStatus = 0,
                            StatusEntity = "Register",
                            Status_Code = "wCCuAsr",
                            Update_DTS = new DateTimeOffset(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0))
                        },
                        new
                        {
                            ID = new Guid("2e96ff56-a2c3-7e5f-d06f-28eb06f8106f"),
                            Created_User_ID = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Description_Eng = "Approvement",
                            Description_Rus = "Утверждение",
                            EntityLocked = true,
                            Insert_DTS = new DateTimeOffset(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0)),
                            Modified_User_ID = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            ReportColor = false,
                            ReportOrder = 0,
                            RowStatus = 0,
                            StatusEntity = "Register",
                            Status_Code = "wCCua",
                            Update_DTS = new DateTimeOffset(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0))
                        },
                        new
                        {
                            ID = new Guid("e10cd869-3878-29b0-1b30-a4a2855c6986"),
                            Created_User_ID = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Description_Eng = "NotApproved",
                            Description_Rus = "Отказано в утверждении",
                            EntityLocked = true,
                            Insert_DTS = new DateTimeOffset(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0)),
                            Modified_User_ID = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            ReportColor = false,
                            ReportOrder = 0,
                            RowStatus = 0,
                            StatusEntity = "Register",
                            Status_Code = "wCCuna",
                            Update_DTS = new DateTimeOffset(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0))
                        },
                        new
                        {
                            ID = new Guid("55bc74c0-937a-1691-9c19-4d40d6028c96"),
                            Created_User_ID = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Description_Eng = "WaitingSMR",
                            Description_Rus = "Ожидание завершения СМР",
                            EntityLocked = true,
                            Insert_DTS = new DateTimeOffset(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0)),
                            Modified_User_ID = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            ReportColor = false,
                            ReportOrder = 0,
                            RowStatus = 0,
                            StatusEntity = "Register",
                            Status_Code = "wCwsmr",
                            Update_DTS = new DateTimeOffset(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0))
                        },
                        new
                        {
                            ID = new Guid("95e4f0ea-9378-dc03-cf36-eb9efa314512"),
                            Created_User_ID = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Description_Eng = "Archived",
                            Description_Rus = "Архивирование",
                            EntityLocked = true,
                            Insert_DTS = new DateTimeOffset(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0)),
                            Modified_User_ID = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            ReportColor = false,
                            ReportOrder = 0,
                            RowStatus = 0,
                            StatusEntity = "Register",
                            Status_Code = "wCarh",
                            Update_DTS = new DateTimeOffset(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0))
                        },
                        new
                        {
                            ID = new Guid("c0327b4c-b2eb-32dc-ce07-80f23940350a"),
                            Created_User_ID = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Description_Eng = "Cancelled",
                            Description_Rus = "Аннулирован",
                            EntityLocked = true,
                            Insert_DTS = new DateTimeOffset(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0)),
                            Modified_User_ID = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            ReportColor = false,
                            ReportOrder = 0,
                            RowStatus = 0,
                            StatusEntity = "Register",
                            Status_Code = "wCcan",
                            Update_DTS = new DateTimeOffset(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0))
                        },
                        new
                        {
                            ID = new Guid("86cb8686-6b39-13c9-bf28-70cf2d6d62ef"),
                            Created_User_ID = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Description_Eng = "Draft",
                            Description_Rus = "Черновик",
                            EntityLocked = false,
                            Insert_DTS = new DateTimeOffset(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0)),
                            Modified_User_ID = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            ReportColor = false,
                            ReportOrder = 0,
                            RowStatus = 0,
                            StatusEntity = "CheckList",
                            Status_Code = "wСLd",
                            Update_DTS = new DateTimeOffset(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0))
                        },
                        new
                        {
                            ID = new Guid("3dbfcb25-3ec5-f5f6-b619-43a6e0f73926"),
                            Created_User_ID = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Description_Eng = "Review",
                            Description_Rus = "Проверка",
                            EntityLocked = false,
                            Insert_DTS = new DateTimeOffset(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0)),
                            Modified_User_ID = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            ReportColor = false,
                            ReportOrder = 0,
                            RowStatus = 0,
                            StatusEntity = "CheckList",
                            Status_Code = "wСLr",
                            Update_DTS = new DateTimeOffset(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0))
                        },
                        new
                        {
                            ID = new Guid("4f24b41a-dac7-3e73-9c0d-b31fb2f19d56"),
                            Created_User_ID = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Description_Eng = "Completed",
                            Description_Rus = "Проверка завершена",
                            EntityLocked = true,
                            Insert_DTS = new DateTimeOffset(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0)),
                            Modified_User_ID = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            ReportColor = false,
                            ReportOrder = 0,
                            RowStatus = 0,
                            StatusEntity = "CheckList",
                            Status_Code = "wСLc",
                            Update_DTS = new DateTimeOffset(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0))
                        },
                        new
                        {
                            ID = new Guid("60486e51-ef01-2480-9e25-7ae2f56f034d"),
                            Created_User_ID = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Description_Eng = "Fixed",
                            Description_Rus = "Замечания устранены",
                            EntityLocked = true,
                            Insert_DTS = new DateTimeOffset(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0)),
                            Modified_User_ID = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            ReportColor = false,
                            ReportOrder = 0,
                            RowStatus = 0,
                            StatusEntity = "CheckList",
                            Status_Code = "wCLf",
                            Update_DTS = new DateTimeOffset(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0))
                        },
                        new
                        {
                            ID = new Guid("6e2d4292-5383-bd3a-24fc-e67857fbf182"),
                            Created_User_ID = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Description_Eng = "Draft",
                            Description_Rus = "Черновик",
                            EntityLocked = false,
                            Insert_DTS = new DateTimeOffset(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0)),
                            Modified_User_ID = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            ReportColor = false,
                            ReportOrder = 0,
                            RowStatus = 0,
                            StatusEntity = "CheckItem",
                            Status_Code = "wCLId",
                            Update_DTS = new DateTimeOffset(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0))
                        },
                        new
                        {
                            ID = new Guid("9ac37fd3-b2c2-c309-5f39-69fb7150a824"),
                            Created_User_ID = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Description_Eng = "Issued",
                            Description_Rus = "Выпущено",
                            EntityLocked = false,
                            Insert_DTS = new DateTimeOffset(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0)),
                            Modified_User_ID = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            ReportColor = false,
                            ReportOrder = 0,
                            RowStatus = 0,
                            StatusEntity = "CheckItem",
                            Status_Code = "wCLIss",
                            Update_DTS = new DateTimeOffset(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0))
                        },
                        new
                        {
                            ID = new Guid("27d94262-2830-1d24-5764-2a90ae9094e7"),
                            Created_User_ID = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Description_Eng = "Fixed",
                            Description_Rus = "Исправлено",
                            EntityLocked = false,
                            Insert_DTS = new DateTimeOffset(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0)),
                            Modified_User_ID = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            ReportColor = false,
                            ReportOrder = 0,
                            RowStatus = 0,
                            StatusEntity = "CheckItem",
                            Status_Code = "wCLIf",
                            Update_DTS = new DateTimeOffset(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0))
                        },
                        new
                        {
                            ID = new Guid("ce34a401-3dea-c8eb-f304-86c73e9ffd9a"),
                            Created_User_ID = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Description_Eng = "Approved",
                            Description_Rus = "Утверждено",
                            EntityLocked = true,
                            Insert_DTS = new DateTimeOffset(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0)),
                            Modified_User_ID = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            ReportColor = false,
                            ReportOrder = 0,
                            RowStatus = 0,
                            StatusEntity = "CheckItem",
                            Status_Code = "wCLIa",
                            Update_DTS = new DateTimeOffset(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0))
                        },
                        new
                        {
                            ID = new Guid("2192a6b9-d13b-3e13-597c-cdd6ebed10df"),
                            Created_User_ID = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Description_Eng = "Cancelled",
                            Description_Rus = "Отменено",
                            EntityLocked = true,
                            Insert_DTS = new DateTimeOffset(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0)),
                            Modified_User_ID = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            ReportColor = false,
                            ReportOrder = 0,
                            RowStatus = 0,
                            StatusEntity = "CheckItem",
                            Status_Code = "wCLIc",
                            Update_DTS = new DateTimeOffset(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("SmartQA.DB.Models.Documents.TitleObject", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TitleObject_ID")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<float?>("Book1_Documents_Total");

                    b.Property<float?>("Book1_Documents_received");

                    b.Property<float?>("Book1_Documents_transmitted_to_CPY");

                    b.Property<float?>("Book1_Pct");

                    b.Property<float?>("Book1_Progress");

                    b.Property<float?>("Book1_Weight");

                    b.Property<float?>("Book2_Pct");

                    b.Property<float?>("Book2_Weight");

                    b.Property<float?>("Book3_Pct");

                    b.Property<float?>("Book3_Weight");

                    b.Property<float?>("Book4_Weight");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<string>("Description")
                        .HasColumnName("Description_Rus")
                        .HasMaxLength(400);

                    b.Property<string>("Description_Eng")
                        .HasMaxLength(300);

                    b.Property<DateTimeOffset?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<Guid?>("Parent_ID");

                    b.Property<string>("Phase_Name")
                        .HasMaxLength(100);

                    b.Property<string>("ReportColor")
                        .HasMaxLength(50);

                    b.Property<int?>("ReportOrder");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<string>("StageOfConstr")
                        .HasMaxLength(10);

                    b.Property<int>("Structure");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("TitleObject_Code")
                        .HasMaxLength(255);

                    b.Property<string>("TitleObject_for_ABDFinalSet")
                        .HasMaxLength(100);

                    b.Property<DateTimeOffset?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.HasIndex("RowStatus");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("p_TitleObject");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Files.FileDesc", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FileDesc_ID")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<string>("ContentType")
                        .HasMaxLength(255);

                    b.Property<Guid>("Created_User_ID");

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<DateTimeOffset?>("Insert_DTS")
                        .IsRequired();

                    b.Property<long>("Length");

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<DateTimeOffset?>("Update_DTS")
                        .IsRequired();

                    b.Property<string>("UploadName")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.HasKey("ID");

                    b.HasAlternateKey("FileName");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.HasIndex("RowStatus");

                    b.ToTable("p_FileDesc");
                });

            modelBuilder.Entity("SmartQA.DB.Models.People.Employee", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Employee_ID")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid?>("AppUser_ID");

                    b.Property<Guid?>("Contragent_ID");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<string>("Employee_Code")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<Guid>("Person_ID");

                    b.Property<Guid>("Position_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<DateTimeOffset?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("AppUser_ID")
                        .IsUnique()
                        .HasFilter("[AppUser_ID] IS NOT NULL");

                    b.HasIndex("Contragent_ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Employee_Code")
                        .IsUnique();

                    b.HasIndex("Modified_User_ID");

                    b.HasIndex("Person_ID");

                    b.HasIndex("Position_ID");

                    b.HasIndex("RowStatus");

                    b.ToTable("p_Employee");
                });

            modelBuilder.Entity("SmartQA.DB.Models.People.Person", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Person_ID")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<DateTime?>("BirthDate")
                        .IsRequired()
                        .HasColumnType("Date");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<DateTimeOffset?>("Insert_DTS")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<string>("Person_Code")
                        .IsRequired();

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<string>("SecondName");

                    b.Property<string>("ShortName");

                    b.Property<DateTimeOffset?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.HasIndex("RowStatus");

                    b.ToTable("p_Person");
                });

            modelBuilder.Entity("SmartQA.DB.Models.PermissionDocuments.DocumentNaks", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DocumentNaks_ID")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<DateTimeOffset?>("Insert_DTS")
                        .IsRequired();

                    b.Property<DateTime?>("IssueDate")
                        .IsRequired()
                        .HasColumnType("Date");

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<string>("Number")
                        .IsRequired();

                    b.Property<Guid?>("ParentDocumentNaks_ID");

                    b.Property<Guid>("Person_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<string>("Schifr");

                    b.Property<DateTimeOffset?>("Update_DTS")
                        .IsRequired();

                    b.Property<DateTime?>("ValidUntil")
                        .IsRequired()
                        .HasColumnType("Date");

                    b.Property<Guid>("WeldType_ID");

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.HasIndex("ParentDocumentNaks_ID");

                    b.HasIndex("Person_ID");

                    b.HasIndex("RowStatus");

                    b.HasIndex("WeldType_ID");

                    b.ToTable("p_DocumentNaks");
                });

            modelBuilder.Entity("SmartQA.DB.Models.PermissionDocuments.DocumentNaksAttest", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DocumentNaksAttest_ID")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<string>("DetailWidth");

                    b.Property<Guid>("DocumentNaks_ID");

                    b.Property<DateTimeOffset?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<string>("OuterDiameter");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<string>("SDR");

                    b.Property<string>("ShieldingGasFlux");

                    b.Property<DateTimeOffset?>("Update_DTS")
                        .IsRequired();

                    b.Property<string>("WeldPositionCustom");

                    b.Property<Guid>("WeldingEquipmentAutomationLevel_ID");

                    b.Property<string>("WeldingWire");

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("DocumentNaks_ID");

                    b.HasIndex("Modified_User_ID");

                    b.HasIndex("RowStatus");

                    b.HasIndex("WeldingEquipmentAutomationLevel_ID");

                    b.ToTable("p_DocumentNaksAttest");
                });

            modelBuilder.Entity("SmartQA.DB.Models.PermissionDocuments.DocumentNaksAttest_to_DetailsType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DocumentNaksAttest_to_DetailsType_ID")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<Guid>("DetailsType_ID");

                    b.Property<Guid>("DocumentNaksAttest_ID");

                    b.Property<DateTimeOffset?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<DateTimeOffset?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("DetailsType_ID");

                    b.HasIndex("DocumentNaksAttest_ID");

                    b.HasIndex("Modified_User_ID");

                    b.HasIndex("RowStatus");

                    b.ToTable("p_DocumentNaksAttest_to_DetailsType");
                });

            modelBuilder.Entity("SmartQA.DB.Models.PermissionDocuments.DocumentNaksAttest_to_JointKind", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DocumentNaksAttest_to_JointKind_ID")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<Guid>("DocumentNaksAttest_ID");

                    b.Property<DateTimeOffset?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("JointKind_ID");

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<DateTimeOffset?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("DocumentNaksAttest_ID");

                    b.HasIndex("JointKind_ID");

                    b.HasIndex("Modified_User_ID");

                    b.HasIndex("RowStatus");

                    b.ToTable("p_DocumentNaksAttest_to_JointKind");
                });

            modelBuilder.Entity("SmartQA.DB.Models.PermissionDocuments.DocumentNaksAttest_to_JointType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DocumentNaksAttest_to_JointType_ID")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<Guid>("DocumentNaksAttest_ID");

                    b.Property<DateTimeOffset?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("JointType_ID");

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<DateTimeOffset?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("DocumentNaksAttest_ID");

                    b.HasIndex("JointType_ID");

                    b.HasIndex("Modified_User_ID");

                    b.HasIndex("RowStatus");

                    b.ToTable("p_DocumentNaksAttest_to_JointType");
                });

            modelBuilder.Entity("SmartQA.DB.Models.PermissionDocuments.DocumentNaksAttest_to_SeamsType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DocumentNaksAttest_to_SeamsType_ID")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<Guid>("DocumentNaksAttest_ID");

                    b.Property<DateTimeOffset?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<Guid>("SeamsType_ID");

                    b.Property<DateTimeOffset?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("DocumentNaksAttest_ID");

                    b.HasIndex("Modified_User_ID");

                    b.HasIndex("RowStatus");

                    b.HasIndex("SeamsType_ID");

                    b.ToTable("p_DocumentNaksAttest_to_SeamsType");
                });

            modelBuilder.Entity("SmartQA.DB.Models.PermissionDocuments.DocumentNaksAttest_to_WeldGOST14098", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DocumentNaksAttest_to_WeldGOST14098_ID")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<Guid>("DocumentNaksAttest_ID");

                    b.Property<DateTimeOffset?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<DateTimeOffset?>("Update_DTS")
                        .IsRequired();

                    b.Property<Guid>("WeldGOST14098_ID");

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("DocumentNaksAttest_ID");

                    b.HasIndex("Modified_User_ID");

                    b.HasIndex("RowStatus");

                    b.HasIndex("WeldGOST14098_ID");

                    b.ToTable("p_DocumentNaksAttest_to_WeldGOST14098");
                });

            modelBuilder.Entity("SmartQA.DB.Models.PermissionDocuments.DocumentNaksAttest_to_WeldMaterial", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DocumentNaksAttest_to_WeldMaterial_ID")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<Guid>("DocumentNaksAttest_ID");

                    b.Property<DateTimeOffset?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<DateTimeOffset?>("Update_DTS")
                        .IsRequired();

                    b.Property<Guid>("WeldMaterial_ID");

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("DocumentNaksAttest_ID");

                    b.HasIndex("Modified_User_ID");

                    b.HasIndex("RowStatus");

                    b.HasIndex("WeldMaterial_ID");

                    b.ToTable("p_DocumentNaksAttest_to_WeldMaterial");
                });

            modelBuilder.Entity("SmartQA.DB.Models.PermissionDocuments.DocumentNaksAttest_to_WeldMaterialGroup", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DocumentNaksAttest_to_WeldMaterialGroup_ID")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<Guid>("DocumentNaksAttest_ID");

                    b.Property<DateTimeOffset?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<DateTimeOffset?>("Update_DTS")
                        .IsRequired();

                    b.Property<Guid>("WeldMaterialGroup_ID");

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("DocumentNaksAttest_ID");

                    b.HasIndex("Modified_User_ID");

                    b.HasIndex("RowStatus");

                    b.HasIndex("WeldMaterialGroup_ID");

                    b.ToTable("p_DocumentNaksAttest_to_WeldMaterialGroup");
                });

            modelBuilder.Entity("SmartQA.DB.Models.PermissionDocuments.DocumentNaksAttest_to_WeldPosition", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DocumentNaksAttest_to_WeldPosition_ID")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<Guid>("DocumentNaksAttest_ID");

                    b.Property<DateTimeOffset?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<DateTimeOffset?>("Update_DTS")
                        .IsRequired();

                    b.Property<Guid>("WeldPosition_ID");

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("DocumentNaksAttest_ID");

                    b.HasIndex("Modified_User_ID");

                    b.HasIndex("RowStatus");

                    b.HasIndex("WeldPosition_ID");

                    b.ToTable("p_DocumentNaksAttest_to_WeldPosition");
                });

            modelBuilder.Entity("SmartQA.DB.Models.PermissionDocuments.DocumentNaks_to_HIFGroup", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DocumentNaks_to_HIFGroup_ID")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<Guid>("DocumentNaks_ID");

                    b.Property<Guid>("HIFGroup_ID");

                    b.Property<DateTimeOffset?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<DateTimeOffset?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("DocumentNaks_ID");

                    b.HasIndex("HIFGroup_ID");

                    b.HasIndex("Modified_User_ID");

                    b.HasIndex("RowStatus");

                    b.ToTable("p_DocumentNaks_to_HIFGroup");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.AccessToPIStaffFunction", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AccessToPIStaffFunction_ID")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<string>("Description")
                        .HasColumnName("Description_Rus")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("AccessToPIStaffFunction_Code")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.HasIndex("RowStatus");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("p_AccessToPIStaffFunction");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.AccessToPIVoltageRange", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AccessToPIVoltageRange_ID")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<string>("Description")
                        .HasColumnName("Description_Rus")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("AccessToPIVoltageRange_Code")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.HasIndex("RowStatus");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("p_AccessToPIVoltageRange");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.AttCenterNaks", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AttCenterNaks_ID")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<string>("City")
                        .HasColumnName("City");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<string>("Description")
                        .HasColumnName("Description_Rus")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("AttCenterNaks_Code")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.HasIndex("RowStatus");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("p_AttCenterNaks");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.AuthToSignInspActsForWSUN", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AuthToSignInspActsForWSUN_ID")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<string>("Description")
                        .HasColumnName("Description_Rus")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("AuthToSignInspActsForWSUN_Code")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.HasIndex("RowStatus");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("p_AuthToSignInspActsForWSUN");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.Contragent", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Contragent_ID")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid?>("ContragentRole_ID");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<string>("Description")
                        .HasColumnName("Description_Rus")
                        .HasMaxLength(255);

                    b.Property<string>("Description_Eng")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("Contragent_Code")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("ContragentRole_ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.HasIndex("RowStatus");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("p_Contragent");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.ContragentRole", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ContragentRole_ID")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<string>("Description")
                        .HasColumnName("Description_Rus")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("ContragentRole_Code")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.HasIndex("RowStatus");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("p_ContragentRole");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.DetailsType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DetailsType_ID")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<string>("Description")
                        .HasColumnName("Description_Rus")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("DetailsType_Code")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.HasIndex("RowStatus");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("p_DetailsType");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.Division", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Division_ID")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<string>("Description")
                        .HasColumnName("Description_Rus")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("Division_Code")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.HasIndex("RowStatus");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("p_Division");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.ElectricalSafetyAbilitation", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ElectricalSafetyAbilitation_ID")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<string>("Description")
                        .HasColumnName("Description_Rus")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("ElectricalSafetyAbilitation_Code")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.HasIndex("RowStatus");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("p_ElectricalSafetyAbilitation");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.HIFGroup", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("HIFGroup_ID")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<string>("Description")
                        .HasColumnName("Description_Rus")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("HIFGroup_Code")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.HasIndex("RowStatus");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("p_HIFGroup");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.InspectionSubject", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("InspectionSubject_ID")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<string>("Description")
                        .HasColumnName("Description_Rus")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<Guid?>("Parent_ID")
                        .HasColumnName("Parent_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<int>("Structure_Level")
                        .HasColumnName("Structure_Level");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("InspectionSubject_Code")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.HasIndex("RowStatus");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("p_InspectionSubject");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.InspectionTechnique", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("InspectionTechnique_ID")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<string>("Description")
                        .HasColumnName("Description_Rus")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("InspectionTechnique_Code")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.HasIndex("RowStatus");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("p_InspectionTechnique");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.JointKind", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("JointKind_ID")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<string>("Description")
                        .HasColumnName("Description_Rus")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("JointKind_Code")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.HasIndex("RowStatus");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("p_JointKind");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.JointType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("JointType_ID")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<string>("Description")
                        .HasColumnName("Description_Rus")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("JointType_Code")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.HasIndex("RowStatus");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("p_JointType");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.Level", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Level_ID")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<string>("Description")
                        .HasColumnName("Description_Rus")
                        .HasMaxLength(500);

                    b.Property<DateTimeOffset?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("Level_Code")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.HasIndex("RowStatus");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("p_Level");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.Position", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Position_ID")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<string>("Description")
                        .HasColumnName("Description_Rus")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("Position_Code")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.HasIndex("RowStatus");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("p_Position");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.QualificationField", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QualificationField_ID")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<string>("Description")
                        .HasColumnName("Description_Rus")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<Guid?>("Parent_ID")
                        .HasColumnName("Parent_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<int>("Structure_Level")
                        .HasColumnName("Structure_Level");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("QualificationField_Code")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.HasIndex("RowStatus");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("p_QualificationField");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.QualificationLevel", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QualificationLevel_ID")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<string>("Description")
                        .HasColumnName("Description_Rus")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("QualificationLevel_Code")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.HasIndex("RowStatus");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("p_QualificationLevel");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.Responsibility", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Responsibility_ID")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<string>("Description")
                        .HasColumnName("Description_Rus")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("Responsibility_Code")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.HasIndex("RowStatus");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("p_Responsibility");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.SeamsType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SeamsType_ID")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<string>("Description")
                        .HasColumnName("Description_Rus")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("SeamsType_Code")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.HasIndex("RowStatus");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("p_SeamsType");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.ShieldingGas", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ShieldingGas_ID")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<string>("Description")
                        .HasColumnName("Description_Rus")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("ShieldingGas_Code")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.HasIndex("RowStatus");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("p_ShieldingGas");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.StaffFunction", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StaffFunction_ID")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<string>("Description")
                        .HasColumnName("Description_Rus")
                        .HasMaxLength(500);

                    b.Property<DateTimeOffset?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("StaffFunction_Code")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.HasIndex("RowStatus");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("p_StaffFunction");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.TestMethod", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TestMethod_ID")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<string>("Description")
                        .HasColumnName("Description_Rus")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<Guid?>("Parent_ID")
                        .HasColumnName("Parent_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<int>("Structure_Level")
                        .HasColumnName("Structure_Level");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("TestMethod_Code")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.HasIndex("RowStatus");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("p_TestMethod");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.TestTypeRef", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TestTypeRef_ID")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<string>("Description")
                        .HasColumnName("Description_Rus")
                        .HasMaxLength(255);

                    b.Property<string>("Description_Eng")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("TestTypeRef_Code")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.HasIndex("RowStatus");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("p_TestTypeRef");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.VoltageRange", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VoltageRange_ID")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<string>("Description")
                        .HasColumnName("Description_Rus")
                        .HasMaxLength(500);

                    b.Property<DateTimeOffset?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("VoltageRange_Code")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.HasIndex("RowStatus");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("p_VoltageRange");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.WeldGOST14098", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("WeldGOST14098_ID")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<string>("Description")
                        .HasColumnName("Description_Rus")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("WeldGOST14098_Code")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.HasIndex("RowStatus");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("p_WeldGOST14098");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.WeldMaterial", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("WeldMaterial_ID")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<string>("Description")
                        .HasColumnName("Description_Rus")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("WeldMaterial_Code")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.HasIndex("RowStatus");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("p_WeldMaterial");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.WeldMaterialGroup", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("WeldMaterialGroup_ID")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<string>("Description")
                        .HasColumnName("Description_Rus")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("WeldMaterialGroup_Code")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.HasIndex("RowStatus");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("p_WeldMaterialGroup");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.WeldPasses", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("WeldPasses_ID")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<string>("Description")
                        .HasColumnName("Description_Rus")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("WeldPasses_Code")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.HasIndex("RowStatus");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("p_WeldPasses");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.WeldPosition", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("WeldPosition_ID")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<string>("Description")
                        .HasColumnName("Description_Rus")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("WeldPosition_Code")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.HasIndex("RowStatus");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("p_WeldPosition");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.WeldType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("WeldType_ID")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<string>("Description")
                        .HasColumnName("Description_Rus")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("WeldType_Code")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.HasIndex("RowStatus");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("p_WeldType");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.WeldingEquipmentAutomationLevel", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("WeldingEquipmentAutomationLevel_ID")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<string>("Description")
                        .HasColumnName("Description_Rus")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("WeldingEquipmentAutomationLevel_Code")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.HasIndex("RowStatus");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("p_WeldingEquipmentAutomationLevel");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Registers.Register", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Register_ID")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<string>("Comment")
                        .HasMaxLength(255);

                    b.Property<Guid?>("Contractor_ID");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<int>("CurrentIteration");

                    b.Property<Guid?>("Customer_ID");

                    b.Property<DateTimeOffset?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<string>("Register_Code")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("next value for [Sequence_Register_Number]")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("Register_Date")
                        .HasColumnType("date");

                    b.Property<Guid?>("Resp_Employee_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<Guid?>("SubContractor_ID");

                    b.Property<DateTimeOffset?>("Update_DTS")
                        .IsRequired();

                    b.Property<Guid?>("WorkPackage_ID");

                    b.HasKey("ID");

                    b.HasAlternateKey("Register_Code");

                    b.HasIndex("Contractor_ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Customer_ID");

                    b.HasIndex("Modified_User_ID");

                    b.HasIndex("Resp_Employee_ID");

                    b.HasIndex("RowStatus");

                    b.HasIndex("SubContractor_ID");

                    b.HasIndex("WorkPackage_ID");

                    b.ToTable("p_Register");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Registers.RegisterStatus", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Register_to_Status_ID")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<DateTimeOffset?>("DTS_End");

                    b.Property<DateTimeOffset?>("DTS_Start")
                        .IsRequired();

                    b.Property<DateTimeOffset?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<Guid?>("Parent_ID");

                    b.Property<Guid>("Register_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<Guid>("Status_ID");

                    b.Property<DateTimeOffset?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.HasIndex("Parent_ID")
                        .IsUnique()
                        .HasFilter("[Parent_ID] IS NOT NULL");

                    b.HasIndex("Register_ID");

                    b.HasIndex("RowStatus");

                    b.HasIndex("Status_ID");

                    b.HasIndex("Register_ID", "DTS_End")
                        .IsUnique()
                        .HasFilter("(DTS_End is null)");

                    b.ToTable("p_Register_to_Status");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Registers.Register_to_Document", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Register_to_Document_ID")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<string>("Comment")
                        .HasMaxLength(255);

                    b.Property<Guid>("Created_User_ID");

                    b.Property<Guid>("Document_ID");

                    b.Property<DateTimeOffset?>("Insert_DTS")
                        .IsRequired();

                    b.Property<int>("Iteration");

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int>("NumberInRegister");

                    b.Property<Guid>("Register_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<int>("SheetFolderNumber");

                    b.Property<DateTimeOffset?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Document_ID")
                        .IsUnique();

                    b.HasIndex("Modified_User_ID");

                    b.HasIndex("Register_ID");

                    b.HasIndex("RowStatus");

                    b.ToTable("p_Register_to_Document");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Registers.Register_to_Marka", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Register_to_Marka_ID")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<DateTimeOffset?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Marka_ID");

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<Guid>("Register_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<DateTimeOffset?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Marka_ID");

                    b.HasIndex("Modified_User_ID");

                    b.HasIndex("RowStatus");

                    b.HasIndex("Register_ID", "Marka_ID")
                        .IsUnique();

                    b.ToTable("p_Register_to_Marka");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Registers.Register_to_TitleObject", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Register_to_TitleObject_ID")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<DateTimeOffset?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<Guid>("Register_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<Guid>("TitleObject_ID");

                    b.Property<DateTimeOffset?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.HasIndex("RowStatus");

                    b.HasIndex("TitleObject_ID");

                    b.HasIndex("Register_ID", "TitleObject_ID")
                        .IsUnique();

                    b.ToTable("p_Register_to_TitleObject");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Registers.WorkPackage", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("WorkPackage_ID")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<string>("AreaOfWork")
                        .HasMaxLength(1000);

                    b.Property<Guid>("Created_User_ID");

                    b.Property<string>("Description")
                        .HasColumnName("Description_Rus")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("Insert_DTS")
                        .IsRequired();

                    b.Property<string>("LocationOfWork")
                        .HasMaxLength(100);

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<string>("ScopeOfWork")
                        .HasMaxLength(1000);

                    b.Property<string>("SiteRussiaYard")
                        .HasMaxLength(100);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("WorkPackage_Code")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.HasIndex("RowStatus");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("p_WorkPackage");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Auth.AppUser", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Common.RowStatus")
                        .WithMany()
                        .HasForeignKey("RowStatus")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Auth.AppUser_to_Role", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "AppUser")
                        .WithMany("AppUser_to_RoleSet")
                        .HasForeignKey("AppUser_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.Role", "Role")
                        .WithMany("AppUser_to_RoleSet")
                        .HasForeignKey("Role_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Common.RowStatus")
                        .WithMany()
                        .HasForeignKey("RowStatus")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Auth.Role", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Common.RowStatus")
                        .WithMany()
                        .HasForeignKey("RowStatus")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Common.Parameter", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Common.RowStatus")
                        .WithMany()
                        .HasForeignKey("RowStatus")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Documents.Document", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Documents.DocumentType", "DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentType_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.People.Employee", "Resp_Employee")
                        .WithMany()
                        .HasForeignKey("Resp_Employee_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Documents.Document", "Root")
                        .WithMany("Revisions")
                        .HasForeignKey("Root_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Common.RowStatus")
                        .WithMany()
                        .HasForeignKey("RowStatus")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Documents.DocumentAttachment", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Documents.Document", "Document")
                        .WithMany("DocumentAttachmentSet")
                        .HasForeignKey("Document_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Files.FileDesc", "FileDesc")
                        .WithOne()
                        .HasForeignKey("SmartQA.DB.Models.Documents.DocumentAttachment", "FileDesc_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Common.RowStatus")
                        .WithMany()
                        .HasForeignKey("RowStatus")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Documents.DocumentProjectNumber", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Common.RowStatus")
                        .WithMany()
                        .HasForeignKey("RowStatus")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Documents.DocumentStatus", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Documents.Document", "Document")
                        .WithMany("DocumentStatusSet")
                        .HasForeignKey("Document_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Documents.DocumentStatus", "PreviousStatus")
                        .WithOne("NextStatus")
                        .HasForeignKey("SmartQA.DB.Models.Documents.DocumentStatus", "Parent_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Common.RowStatus")
                        .WithMany()
                        .HasForeignKey("RowStatus")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Documents.Status", "Status")
                        .WithMany()
                        .HasForeignKey("Status_ID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Documents.DocumentType", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Common.RowStatus")
                        .WithMany()
                        .HasForeignKey("RowStatus")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Documents.Document_to_GOST", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Documents.Document", "Document")
                        .WithMany("Document_to_GOSTSet")
                        .HasForeignKey("Document_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Documents.GOST", "GOST")
                        .WithMany()
                        .HasForeignKey("GOST_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Common.RowStatus")
                        .WithMany()
                        .HasForeignKey("RowStatus")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Documents.Document_to_PID", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Documents.Document", "Document")
                        .WithMany("Document_to_PIDSet")
                        .HasForeignKey("Document_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Documents.PID", "PID")
                        .WithMany()
                        .HasForeignKey("PID_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Common.RowStatus")
                        .WithMany()
                        .HasForeignKey("RowStatus")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Documents.GOST", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Documents.Marka", "Marka")
                        .WithMany()
                        .HasForeignKey("Marka_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Common.RowStatus")
                        .WithMany()
                        .HasForeignKey("RowStatus")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Documents.GOST_to_PID", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Documents.GOST", "GOST")
                        .WithMany("GOST_to_PIDSet")
                        .HasForeignKey("GOST_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Documents.PID", "PID")
                        .WithMany("GOST_to_PIDSet")
                        .HasForeignKey("PID_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Common.RowStatus")
                        .WithMany()
                        .HasForeignKey("RowStatus")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Documents.GOST_to_TitleObject", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Documents.GOST", "GOST")
                        .WithMany("GOST_to_TitleObjectSet")
                        .HasForeignKey("GOST_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Common.RowStatus")
                        .WithMany()
                        .HasForeignKey("RowStatus")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Documents.TitleObject", "TitleObject")
                        .WithMany()
                        .HasForeignKey("TitleObject_ID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Documents.Marka", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Common.RowStatus")
                        .WithMany()
                        .HasForeignKey("RowStatus")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Documents.PID", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Common.RowStatus")
                        .WithMany()
                        .HasForeignKey("RowStatus")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Documents.Status", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Common.RowStatus")
                        .WithMany()
                        .HasForeignKey("RowStatus")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Documents.TitleObject", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Common.RowStatus")
                        .WithMany()
                        .HasForeignKey("RowStatus")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Files.FileDesc", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Common.RowStatus")
                        .WithMany()
                        .HasForeignKey("RowStatus")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.People.Employee", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "AppUser")
                        .WithOne("Employee")
                        .HasForeignKey("SmartQA.DB.Models.People.Employee", "AppUser_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Reftables.Contragent", "Contragent")
                        .WithMany()
                        .HasForeignKey("Contragent_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.People.Person", "Person")
                        .WithMany("Employees")
                        .HasForeignKey("Person_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Reftables.Position", "Position")
                        .WithMany()
                        .HasForeignKey("Position_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Common.RowStatus")
                        .WithMany()
                        .HasForeignKey("RowStatus")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.People.Person", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Common.RowStatus")
                        .WithMany()
                        .HasForeignKey("RowStatus")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.PermissionDocuments.DocumentNaks", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.PermissionDocuments.DocumentNaks", "ParentDocumentNaks")
                        .WithMany("Inserts")
                        .HasForeignKey("ParentDocumentNaks_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.People.Person", "Person")
                        .WithMany()
                        .HasForeignKey("Person_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Common.RowStatus")
                        .WithMany()
                        .HasForeignKey("RowStatus")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Reftables.WeldType", "WeldType")
                        .WithMany()
                        .HasForeignKey("WeldType_ID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.PermissionDocuments.DocumentNaksAttest", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.PermissionDocuments.DocumentNaks", "DocumentNaks")
                        .WithMany("DocumentNaksAttestSet")
                        .HasForeignKey("DocumentNaks_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Common.RowStatus")
                        .WithMany()
                        .HasForeignKey("RowStatus")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Reftables.WeldingEquipmentAutomationLevel", "WeldingEquipmentAutomationLevel")
                        .WithMany()
                        .HasForeignKey("WeldingEquipmentAutomationLevel_ID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.PermissionDocuments.DocumentNaksAttest_to_DetailsType", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Reftables.DetailsType", "DetailsType")
                        .WithMany()
                        .HasForeignKey("DetailsType_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.PermissionDocuments.DocumentNaksAttest", "DocumentNaksAttest")
                        .WithMany("DocumentNaksAttest_to_DetailsTypeSet")
                        .HasForeignKey("DocumentNaksAttest_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Common.RowStatus")
                        .WithMany()
                        .HasForeignKey("RowStatus")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.PermissionDocuments.DocumentNaksAttest_to_JointKind", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.PermissionDocuments.DocumentNaksAttest", "DocumentNaksAttest")
                        .WithMany("DocumentNaksAttest_to_JointKindSet")
                        .HasForeignKey("DocumentNaksAttest_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Reftables.JointKind", "JointKind")
                        .WithMany()
                        .HasForeignKey("JointKind_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Common.RowStatus")
                        .WithMany()
                        .HasForeignKey("RowStatus")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.PermissionDocuments.DocumentNaksAttest_to_JointType", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.PermissionDocuments.DocumentNaksAttest", "DocumentNaksAttest")
                        .WithMany("DocumentNaksAttest_to_JointTypeSet")
                        .HasForeignKey("DocumentNaksAttest_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Reftables.JointType", "JointType")
                        .WithMany()
                        .HasForeignKey("JointType_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Common.RowStatus")
                        .WithMany()
                        .HasForeignKey("RowStatus")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.PermissionDocuments.DocumentNaksAttest_to_SeamsType", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.PermissionDocuments.DocumentNaksAttest", "DocumentNaksAttest")
                        .WithMany("DocumentNaksAttest_to_SeamsTypeSet")
                        .HasForeignKey("DocumentNaksAttest_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Common.RowStatus")
                        .WithMany()
                        .HasForeignKey("RowStatus")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Reftables.SeamsType", "SeamsType")
                        .WithMany()
                        .HasForeignKey("SeamsType_ID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.PermissionDocuments.DocumentNaksAttest_to_WeldGOST14098", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.PermissionDocuments.DocumentNaksAttest", "DocumentNaksAttest")
                        .WithMany("DocumentNaksAttest_to_WeldGOST14098Set")
                        .HasForeignKey("DocumentNaksAttest_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Common.RowStatus")
                        .WithMany()
                        .HasForeignKey("RowStatus")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Reftables.WeldGOST14098", "WeldGOST14098")
                        .WithMany()
                        .HasForeignKey("WeldGOST14098_ID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.PermissionDocuments.DocumentNaksAttest_to_WeldMaterial", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.PermissionDocuments.DocumentNaksAttest", "DocumentNaksAttest")
                        .WithMany("DocumentNaksAttest_to_WeldMaterialSet")
                        .HasForeignKey("DocumentNaksAttest_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Common.RowStatus")
                        .WithMany()
                        .HasForeignKey("RowStatus")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Reftables.WeldMaterial", "WeldMaterial")
                        .WithMany()
                        .HasForeignKey("WeldMaterial_ID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.PermissionDocuments.DocumentNaksAttest_to_WeldMaterialGroup", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.PermissionDocuments.DocumentNaksAttest", "DocumentNaksAttest")
                        .WithMany("DocumentNaksAttest_to_WeldMaterialGroupSet")
                        .HasForeignKey("DocumentNaksAttest_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Common.RowStatus")
                        .WithMany()
                        .HasForeignKey("RowStatus")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Reftables.WeldMaterialGroup", "WeldMaterialGroup")
                        .WithMany()
                        .HasForeignKey("WeldMaterialGroup_ID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.PermissionDocuments.DocumentNaksAttest_to_WeldPosition", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.PermissionDocuments.DocumentNaksAttest", "DocumentNaksAttest")
                        .WithMany("DocumentNaksAttest_to_WeldPositionSet")
                        .HasForeignKey("DocumentNaksAttest_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Common.RowStatus")
                        .WithMany()
                        .HasForeignKey("RowStatus")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Reftables.WeldPosition", "WeldPosition")
                        .WithMany()
                        .HasForeignKey("WeldPosition_ID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.PermissionDocuments.DocumentNaks_to_HIFGroup", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.PermissionDocuments.DocumentNaks", "DocumentNaks")
                        .WithMany("DocumentNaks_to_HIFGroupSet")
                        .HasForeignKey("DocumentNaks_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Reftables.HIFGroup", "HIFGroup")
                        .WithMany()
                        .HasForeignKey("HIFGroup_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Common.RowStatus")
                        .WithMany()
                        .HasForeignKey("RowStatus")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.AccessToPIStaffFunction", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Common.RowStatus")
                        .WithMany()
                        .HasForeignKey("RowStatus")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.AccessToPIVoltageRange", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Common.RowStatus")
                        .WithMany()
                        .HasForeignKey("RowStatus")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.AttCenterNaks", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Common.RowStatus")
                        .WithMany()
                        .HasForeignKey("RowStatus")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.AuthToSignInspActsForWSUN", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Common.RowStatus")
                        .WithMany()
                        .HasForeignKey("RowStatus")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.Contragent", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Reftables.ContragentRole", "ContragentRole")
                        .WithMany()
                        .HasForeignKey("ContragentRole_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Common.RowStatus")
                        .WithMany()
                        .HasForeignKey("RowStatus")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.ContragentRole", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Common.RowStatus")
                        .WithMany()
                        .HasForeignKey("RowStatus")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.DetailsType", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Common.RowStatus")
                        .WithMany()
                        .HasForeignKey("RowStatus")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.Division", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Common.RowStatus")
                        .WithMany()
                        .HasForeignKey("RowStatus")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.ElectricalSafetyAbilitation", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Common.RowStatus")
                        .WithMany()
                        .HasForeignKey("RowStatus")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.HIFGroup", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Common.RowStatus")
                        .WithMany()
                        .HasForeignKey("RowStatus")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.InspectionSubject", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Common.RowStatus")
                        .WithMany()
                        .HasForeignKey("RowStatus")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.InspectionTechnique", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Common.RowStatus")
                        .WithMany()
                        .HasForeignKey("RowStatus")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.JointKind", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Common.RowStatus")
                        .WithMany()
                        .HasForeignKey("RowStatus")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.JointType", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Common.RowStatus")
                        .WithMany()
                        .HasForeignKey("RowStatus")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.Level", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Common.RowStatus")
                        .WithMany()
                        .HasForeignKey("RowStatus")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.Position", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Common.RowStatus")
                        .WithMany()
                        .HasForeignKey("RowStatus")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.QualificationField", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Common.RowStatus")
                        .WithMany()
                        .HasForeignKey("RowStatus")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.QualificationLevel", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Common.RowStatus")
                        .WithMany()
                        .HasForeignKey("RowStatus")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.Responsibility", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Common.RowStatus")
                        .WithMany()
                        .HasForeignKey("RowStatus")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.SeamsType", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Common.RowStatus")
                        .WithMany()
                        .HasForeignKey("RowStatus")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.ShieldingGas", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Common.RowStatus")
                        .WithMany()
                        .HasForeignKey("RowStatus")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.StaffFunction", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Common.RowStatus")
                        .WithMany()
                        .HasForeignKey("RowStatus")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.TestMethod", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Common.RowStatus")
                        .WithMany()
                        .HasForeignKey("RowStatus")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.TestTypeRef", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Common.RowStatus")
                        .WithMany()
                        .HasForeignKey("RowStatus")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.VoltageRange", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Common.RowStatus")
                        .WithMany()
                        .HasForeignKey("RowStatus")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.WeldGOST14098", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Common.RowStatus")
                        .WithMany()
                        .HasForeignKey("RowStatus")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.WeldMaterial", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Common.RowStatus")
                        .WithMany()
                        .HasForeignKey("RowStatus")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.WeldMaterialGroup", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Common.RowStatus")
                        .WithMany()
                        .HasForeignKey("RowStatus")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.WeldPasses", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Common.RowStatus")
                        .WithMany()
                        .HasForeignKey("RowStatus")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.WeldPosition", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Common.RowStatus")
                        .WithMany()
                        .HasForeignKey("RowStatus")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.WeldType", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Common.RowStatus")
                        .WithMany()
                        .HasForeignKey("RowStatus")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.WeldingEquipmentAutomationLevel", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Common.RowStatus")
                        .WithMany()
                        .HasForeignKey("RowStatus")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Registers.Register", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Reftables.Contragent", "Contractor")
                        .WithMany()
                        .HasForeignKey("Contractor_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Reftables.Contragent", "Customer")
                        .WithMany()
                        .HasForeignKey("Customer_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.People.Employee", "Resp_Employee")
                        .WithMany()
                        .HasForeignKey("Resp_Employee_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Common.RowStatus")
                        .WithMany()
                        .HasForeignKey("RowStatus")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Reftables.Contragent", "SubContractor")
                        .WithMany()
                        .HasForeignKey("SubContractor_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Registers.WorkPackage", "WorkPackage")
                        .WithMany()
                        .HasForeignKey("WorkPackage_ID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Registers.RegisterStatus", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Registers.RegisterStatus", "PreviousStatus")
                        .WithOne("NextStatus")
                        .HasForeignKey("SmartQA.DB.Models.Registers.RegisterStatus", "Parent_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Registers.Register", "Register")
                        .WithMany("RegisterStatusSet")
                        .HasForeignKey("Register_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Common.RowStatus")
                        .WithMany()
                        .HasForeignKey("RowStatus")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Documents.Status", "Status")
                        .WithMany()
                        .HasForeignKey("Status_ID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Registers.Register_to_Document", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Documents.Document", "Document")
                        .WithOne()
                        .HasForeignKey("SmartQA.DB.Models.Registers.Register_to_Document", "Document_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Registers.Register", "Register")
                        .WithMany("Register_to_DocumentSet")
                        .HasForeignKey("Register_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Common.RowStatus")
                        .WithMany()
                        .HasForeignKey("RowStatus")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Registers.Register_to_Marka", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Documents.Marka", "Marka")
                        .WithMany()
                        .HasForeignKey("Marka_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Registers.Register", "Register")
                        .WithMany("Register_to_MarkaSet")
                        .HasForeignKey("Register_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Common.RowStatus")
                        .WithMany()
                        .HasForeignKey("RowStatus")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Registers.Register_to_TitleObject", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Registers.Register", "Register")
                        .WithMany("Register_to_TitleObjectSet")
                        .HasForeignKey("Register_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Common.RowStatus")
                        .WithMany()
                        .HasForeignKey("RowStatus")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Documents.TitleObject", "TitleObject")
                        .WithMany()
                        .HasForeignKey("TitleObject_ID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Registers.WorkPackage", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Common.RowStatus")
                        .WithMany()
                        .HasForeignKey("RowStatus")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
