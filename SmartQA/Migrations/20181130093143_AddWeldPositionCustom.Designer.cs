// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartQA.DB;

namespace SmartQA.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20181130093143_AddWeldPositionCustom")]
    partial class AddWeldPositionCustom
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SmartQA.DB.Models.Auth.AppUser", b =>
                {
                    b.Property<Guid>("AppUser_ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AppUser_Code");

                    b.Property<string>("Comment");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<DateTime?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<DateTime?>("Update_DTS")
                        .IsRequired();

                    b.Property<byte[]>("User_Password");

                    b.HasKey("AppUser_ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.ToTable("p_AppUser");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Auth.AppUser_to_Role", b =>
                {
                    b.Property<Guid>("AppUser_to_Role_ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AppUser_ID");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<DateTime?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<Guid>("Role_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<DateTime?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("AppUser_to_Role_ID");

                    b.HasIndex("AppUser_ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.HasIndex("Role_ID");

                    b.ToTable("p_AppUser_to_Role");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Auth.Role", b =>
                {
                    b.Property<Guid>("Role_ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("Created_User_ID");

                    b.Property<DateTime?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<string>("Role_Code");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<DateTime?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("Role_ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.ToTable("p_Role");
                });

            modelBuilder.Entity("SmartQA.DB.Models.People.Contragent", b =>
                {
                    b.Property<Guid>("Contragent_ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Contragent_Code")
                        .IsRequired();

                    b.Property<Guid>("Created_User_ID");

                    b.Property<string>("Description_Eng");

                    b.Property<string>("Description_Rus");

                    b.Property<DateTime?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<DateTime?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("Contragent_ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.ToTable("p_Contragent");
                });

            modelBuilder.Entity("SmartQA.DB.Models.People.Division", b =>
                {
                    b.Property<Guid>("Division_ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("Contragent_ID");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<string>("Division_Code")
                        .IsRequired();

                    b.Property<string>("Division_Name");

                    b.Property<DateTime?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<DateTime?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("Division_ID");

                    b.HasIndex("Contragent_ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.ToTable("p_Division");
                });

            modelBuilder.Entity("SmartQA.DB.Models.People.Employee", b =>
                {
                    b.Property<Guid>("Employee_ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AppUser_ID")
                        .HasColumnName("AppUser_Id");

                    b.Property<Guid?>("Contragent_ID");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<string>("Employee_Code")
                        .IsRequired();

                    b.Property<DateTime?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<Guid>("Person_ID");

                    b.Property<Guid?>("Position_ID")
                        .HasColumnName("Position_Id");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<DateTime?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("Employee_ID");

                    b.HasIndex("AppUser_ID");

                    b.HasIndex("Contragent_ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.HasIndex("Person_ID");

                    b.HasIndex("Position_ID");

                    b.ToTable("p_Employee");
                });

            modelBuilder.Entity("SmartQA.DB.Models.People.Person", b =>
                {
                    b.Property<Guid>("Person_ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("BirthDate")
                        .IsRequired()
                        .HasColumnType("Date");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<DateTime?>("Insert_DTS")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<string>("Person_Code")
                        .IsRequired();

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<string>("SecondName");

                    b.Property<string>("ShortName");

                    b.Property<DateTime?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("Person_ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.ToTable("p_Person");
                });

            modelBuilder.Entity("SmartQA.DB.Models.People.Position", b =>
                {
                    b.Property<Guid>("Position_ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("Created_User_ID");

                    b.Property<string>("Description_Eng");

                    b.Property<string>("Description_Rus");

                    b.Property<Guid?>("Division_ID");

                    b.Property<DateTime?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<string>("Position_Code")
                        .IsRequired();

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<DateTime?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("Position_ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Division_ID");

                    b.HasIndex("Modified_User_ID");

                    b.ToTable("p_Position");
                });

            modelBuilder.Entity("SmartQA.DB.Models.PermissionDocuments.DocumentNaks", b =>
                {
                    b.Property<Guid>("DocumentNaks_ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("Created_User_ID");

                    b.Property<DateTime?>("Insert_DTS")
                        .IsRequired();

                    b.Property<DateTime?>("IssueDate")
                        .IsRequired()
                        .HasColumnType("Date");

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<string>("Number")
                        .IsRequired();

                    b.Property<Guid?>("ParentDocumentNaks_ID");

                    b.Property<Guid>("Person_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<string>("Schifr");

                    b.Property<DateTime?>("Update_DTS")
                        .IsRequired();

                    b.Property<DateTime?>("ValidUntil")
                        .IsRequired()
                        .HasColumnType("Date");

                    b.Property<Guid>("WeldType_ID");

                    b.HasKey("DocumentNaks_ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.HasIndex("ParentDocumentNaks_ID");

                    b.HasIndex("Person_ID");

                    b.HasIndex("WeldType_ID");

                    b.ToTable("p_DocumentNaks");
                });

            modelBuilder.Entity("SmartQA.DB.Models.PermissionDocuments.DocumentNaks_to_HIFGroup", b =>
                {
                    b.Property<Guid>("DocumentNaks_to_HIFGroup_ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("Created_User_ID");

                    b.Property<Guid>("DocumentNaks_ID");

                    b.Property<Guid>("HIFGroup_ID");

                    b.Property<DateTime?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<DateTime?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("DocumentNaks_to_HIFGroup_ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("DocumentNaks_ID");

                    b.HasIndex("HIFGroup_ID");

                    b.HasIndex("Modified_User_ID");

                    b.ToTable("p_DocumentNaks_to_HIFGroup");
                });

            modelBuilder.Entity("SmartQA.DB.Models.PermissionDocuments.DocumentNaksAttest", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DocumentNaksAttest_ID");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<string>("DetailWidth");

                    b.Property<Guid>("DocumentNaks_ID");

                    b.Property<DateTime?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("JointType_ID");

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<string>("OuterDiameter");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<string>("SDR");

                    b.Property<string>("ShieldingGasFlux");

                    b.Property<DateTime?>("Update_DTS")
                        .IsRequired();

                    b.Property<Guid>("WeldGOST14098_ID");

                    b.Property<string>("WeldPositionCustom");

                    b.Property<Guid>("WeldingEquipmentAutomationLevel_ID");

                    b.Property<string>("WeldingWire");

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("DocumentNaks_ID");

                    b.HasIndex("JointType_ID");

                    b.HasIndex("Modified_User_ID");

                    b.HasIndex("WeldGOST14098_ID");

                    b.HasIndex("WeldingEquipmentAutomationLevel_ID");

                    b.ToTable("p_DocumentNaksAttest");
                });

            modelBuilder.Entity("SmartQA.DB.Models.PermissionDocuments.DocumentNaksAttest_to_DetailsType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DocumentNaksAttest_to_DetailsType_ID");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<Guid>("DetailsType_ID");

                    b.Property<Guid>("DocumentNaksAttest_ID");

                    b.Property<DateTime?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<DateTime?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("DetailsType_ID");

                    b.HasIndex("DocumentNaksAttest_ID");

                    b.HasIndex("Modified_User_ID");

                    b.ToTable("p_DocumentNaksAttest_to_DetailsType");
                });

            modelBuilder.Entity("SmartQA.DB.Models.PermissionDocuments.DocumentNaksAttest_to_JointKind", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DocumentNaksAttest_to_JointKind_ID");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<Guid>("DocumentNaksAttest_ID");

                    b.Property<DateTime?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("JointKind_ID");

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<DateTime?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("DocumentNaksAttest_ID");

                    b.HasIndex("JointKind_ID");

                    b.HasIndex("Modified_User_ID");

                    b.ToTable("p_DocumentNaksAttest_to_JointKind");
                });

            modelBuilder.Entity("SmartQA.DB.Models.PermissionDocuments.DocumentNaksAttest_to_SeamsType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DocumentNaksAttest_to_SeamsType_ID");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<Guid>("DocumentNaksAttest_ID");

                    b.Property<DateTime?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<Guid>("SeamsType_ID");

                    b.Property<DateTime?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("DocumentNaksAttest_ID");

                    b.HasIndex("Modified_User_ID");

                    b.HasIndex("SeamsType_ID");

                    b.ToTable("p_DocumentNaksAttest_to_SeamsType");
                });

            modelBuilder.Entity("SmartQA.DB.Models.PermissionDocuments.DocumentNaksAttest_to_WeldMaterial", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DocumentNaksAttest_to_WeldMaterial_ID");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<Guid>("DocumentNaksAttest_ID");

                    b.Property<DateTime?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<DateTime?>("Update_DTS")
                        .IsRequired();

                    b.Property<Guid>("WeldMaterial_ID");

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("DocumentNaksAttest_ID");

                    b.HasIndex("Modified_User_ID");

                    b.HasIndex("WeldMaterial_ID");

                    b.ToTable("p_DocumentNaksAttest_to_WeldMaterial");
                });

            modelBuilder.Entity("SmartQA.DB.Models.PermissionDocuments.DocumentNaksAttest_to_WeldMaterialGroup", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DocumentNaksAttest_to_WeldMaterialGroup_ID");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<Guid>("DocumentNaksAttest_ID");

                    b.Property<DateTime?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<DateTime?>("Update_DTS")
                        .IsRequired();

                    b.Property<Guid>("WeldMaterialGroup_ID");

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("DocumentNaksAttest_ID");

                    b.HasIndex("Modified_User_ID");

                    b.HasIndex("WeldMaterialGroup_ID");

                    b.ToTable("p_DocumentNaksAttest_to_WeldMaterialGroup");
                });

            modelBuilder.Entity("SmartQA.DB.Models.PermissionDocuments.DocumentNaksAttest_to_WeldPosition", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DocumentNaksAttest_to_WeldPosition_ID");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<Guid>("DocumentNaksAttest_ID");

                    b.Property<DateTime?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<DateTime?>("Update_DTS")
                        .IsRequired();

                    b.Property<Guid>("WeldPosition_ID");

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("DocumentNaksAttest_ID");

                    b.HasIndex("Modified_User_ID");

                    b.HasIndex("WeldPosition_ID");

                    b.ToTable("p_DocumentNaksAttest_to_WeldPosition");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.AccessToPIStaffFunction", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AccessToPIStaffFunction_ID");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<string>("Description")
                        .HasColumnName("Description_Rus");

                    b.Property<DateTime?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("AccessToPIStaffFunction_Code");

                    b.Property<DateTime?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.ToTable("p_AccessToPIStaffFunction");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.AccessToPIVoltageRange", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AccessToPIVoltageRange_ID");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<string>("Description")
                        .HasColumnName("Description_Rus");

                    b.Property<DateTime?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("AccessToPIVoltageRange_Code");

                    b.Property<DateTime?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.ToTable("p_AccessToPIVoltageRange");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.AttCenterNaks", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AttCenterNaks_ID");

                    b.Property<string>("City")
                        .HasColumnName("City");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<string>("Description")
                        .HasColumnName("Description_Rus");

                    b.Property<DateTime?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("AttCenterNaks_Code");

                    b.Property<DateTime?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.ToTable("p_AttCenterNaks");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.AuthToSignInspActsForWSUN", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AuthToSignInspActsForWSUN_ID");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<string>("Description")
                        .HasColumnName("Description_Rus");

                    b.Property<DateTime?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("AuthToSignInspActsForWSUN_Code");

                    b.Property<DateTime?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.ToTable("p_AuthToSignInspActsForWSUN");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.DetailsType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DetailsType_ID");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<string>("Description")
                        .HasColumnName("Description_Rus");

                    b.Property<DateTime?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("DetailsType_Code");

                    b.Property<DateTime?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.ToTable("p_DetailsType");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.ElectricalSafetyAbilitation", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ElectricalSafetyAbilitation_ID");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<string>("Description")
                        .HasColumnName("Description_Rus");

                    b.Property<DateTime?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("ElectricalSafetyAbilitation_Code");

                    b.Property<DateTime?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.ToTable("p_ElectricalSafetyAbilitation");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.HIFGroup", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("HIFGroup_ID");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<string>("Description")
                        .HasColumnName("Description_Rus");

                    b.Property<DateTime?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("HIFGroup_Code");

                    b.Property<DateTime?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.ToTable("p_HIFGroup");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.InspectionSubject", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("InspectionSubject_ID");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<string>("Description")
                        .HasColumnName("Description_Rus");

                    b.Property<DateTime?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<Guid>("Parent_Id")
                        .HasColumnName("Parent_Id");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<int>("Structure_Level")
                        .HasColumnName("Structure_Level");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("InspectionSubject_Code");

                    b.Property<DateTime?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.ToTable("p_InspectionSubject");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.InspectionTechnique", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("InspectionTechnique_ID");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<string>("Description")
                        .HasColumnName("Description_Rus");

                    b.Property<DateTime?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("InspectionTechnique_Code");

                    b.Property<DateTime?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.ToTable("p_InspectionTechnique");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.JointKind", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("JointKind_ID");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<string>("Description")
                        .HasColumnName("Description_Rus");

                    b.Property<DateTime?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("JointKind_Code");

                    b.Property<DateTime?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.ToTable("p_JointKind");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.JointType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("JointType_ID");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<string>("Description")
                        .HasColumnName("Description_Rus");

                    b.Property<DateTime?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("JointType_Code");

                    b.Property<DateTime?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.ToTable("p_JointType");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.QualificationField", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QualificationField_ID");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<string>("Description")
                        .HasColumnName("Description_Rus");

                    b.Property<DateTime?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<Guid>("Parent_Id")
                        .HasColumnName("Parent_Id");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<int>("Structure_Level")
                        .HasColumnName("Structure_Level");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("QualificationField_Code");

                    b.Property<DateTime?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.ToTable("p_QualificationField");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.QualificationLevel", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QualificationLevel_ID");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<string>("Description")
                        .HasColumnName("Description_Rus");

                    b.Property<DateTime?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("QualificationLevel_Code");

                    b.Property<DateTime?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.ToTable("p_QualificationLevel");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.Responsibility", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Responsibility_ID");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<string>("Description")
                        .HasColumnName("Description_Rus");

                    b.Property<DateTime?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("Responsibility_Code");

                    b.Property<DateTime?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.ToTable("p_Responsibility");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.SeamsType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SeamsType_ID");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<string>("Description")
                        .HasColumnName("Description_Rus");

                    b.Property<DateTime?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("SeamsType_Code");

                    b.Property<DateTime?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.ToTable("p_SeamsType");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.ShieldingGas", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ShieldingGas_ID");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<string>("Description")
                        .HasColumnName("Description_Rus");

                    b.Property<DateTime?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("ShieldingGas_Code");

                    b.Property<DateTime?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.ToTable("p_ShieldingGas");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.TestMethod", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TestMethod_ID");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<string>("Description")
                        .HasColumnName("Description_Rus");

                    b.Property<DateTime?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<Guid>("Parent_Id")
                        .HasColumnName("Parent_Id");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<int>("Structure_Level")
                        .HasColumnName("Structure_Level");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("TestMethod_Code");

                    b.Property<DateTime?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.ToTable("p_TestMethod");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.TestTypeRef", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TestTypeRef_ID");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<string>("Description")
                        .HasColumnName("Description_Rus");

                    b.Property<DateTime?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("TestTypeRef_Code");

                    b.Property<DateTime?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.ToTable("p_TestTypeRef");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.WeldGOST14098", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("WeldGOST14098_ID");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<string>("Description")
                        .HasColumnName("Description_Rus");

                    b.Property<DateTime?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("WeldGOST14098_Code");

                    b.Property<DateTime?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.ToTable("p_WeldGOST14098");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.WeldingEquipmentAutomationLevel", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("WeldingEquipmentAutomationLevel_ID");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<string>("Description")
                        .HasColumnName("Description_Rus");

                    b.Property<DateTime?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("WeldingEquipmentAutomationLevel_Code");

                    b.Property<DateTime?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.ToTable("p_WeldingEquipmentAutomationLevel");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.WeldMaterial", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("WeldMaterial_ID");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<string>("Description")
                        .HasColumnName("Description_Rus");

                    b.Property<DateTime?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("WeldMaterial_Code");

                    b.Property<DateTime?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.ToTable("p_WeldMaterial");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.WeldMaterialGroup", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("WeldMaterialGroup_ID");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<string>("Description")
                        .HasColumnName("Description_Rus");

                    b.Property<DateTime?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("WeldMaterialGroup_Code");

                    b.Property<DateTime?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.ToTable("p_WeldMaterialGroup");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.WeldPasses", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("WeldPasses_ID");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<string>("Description")
                        .HasColumnName("Description_Rus");

                    b.Property<DateTime?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("WeldPasses_Code");

                    b.Property<DateTime?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.ToTable("p_WeldPasses");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.WeldPosition", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("WeldPosition_ID");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<string>("Description")
                        .HasColumnName("Description_Rus");

                    b.Property<DateTime?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("WeldPosition_Code");

                    b.Property<DateTime?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.ToTable("p_WeldPosition");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.WeldType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("WeldType_ID");

                    b.Property<Guid>("Created_User_ID");

                    b.Property<string>("Description")
                        .HasColumnName("Description_Rus");

                    b.Property<DateTime?>("Insert_DTS")
                        .IsRequired();

                    b.Property<Guid>("Modified_User_ID");

                    b.Property<int?>("RowStatus")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("WeldType_Code");

                    b.Property<DateTime?>("Update_DTS")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Created_User_ID");

                    b.HasIndex("Modified_User_ID");

                    b.ToTable("p_WeldType");
                });

            modelBuilder.Entity("SmartQA.DB.Models.Auth.AppUser", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Auth.AppUser_to_Role", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "AppUser")
                        .WithMany("AppUser_to_RoleSet")
                        .HasForeignKey("AppUser_ID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.Role", "Role")
                        .WithMany("AppUser_to_Roles")
                        .HasForeignKey("Role_ID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Auth.Role", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.People.Contragent", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.People.Division", b =>
                {
                    b.HasOne("SmartQA.DB.Models.People.Contragent", "Contragent")
                        .WithMany()
                        .HasForeignKey("Contragent_ID");

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.People.Employee", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUser_ID");

                    b.HasOne("SmartQA.DB.Models.People.Contragent", "Contragent")
                        .WithMany()
                        .HasForeignKey("Contragent_ID");

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.People.Person", "Person")
                        .WithMany("Employees")
                        .HasForeignKey("Person_ID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartQA.DB.Models.People.Position", "Position")
                        .WithMany()
                        .HasForeignKey("Position_ID");
                });

            modelBuilder.Entity("SmartQA.DB.Models.People.Person", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.People.Position", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.People.Division", "Division")
                        .WithMany()
                        .HasForeignKey("Division_ID");

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.PermissionDocuments.DocumentNaks", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.PermissionDocuments.DocumentNaks", "ParentDocumentNaks")
                        .WithMany("Inserts")
                        .HasForeignKey("ParentDocumentNaks_ID");

                    b.HasOne("SmartQA.DB.Models.People.Person", "Person")
                        .WithMany()
                        .HasForeignKey("Person_ID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartQA.DB.Models.Reftables.WeldType", "WeldType")
                        .WithMany()
                        .HasForeignKey("WeldType_ID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartQA.DB.Models.PermissionDocuments.DocumentNaks_to_HIFGroup", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.PermissionDocuments.DocumentNaks", "DocumentNaks")
                        .WithMany("DocumentNaks_to_HIFGroupSet")
                        .HasForeignKey("DocumentNaks_ID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartQA.DB.Models.Reftables.HIFGroup", "HIFGroup")
                        .WithMany()
                        .HasForeignKey("HIFGroup_ID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.PermissionDocuments.DocumentNaksAttest", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.PermissionDocuments.DocumentNaks", "DocumentNaks")
                        .WithMany("DocumentNaksAttestSet")
                        .HasForeignKey("DocumentNaks_ID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartQA.DB.Models.Reftables.JointType", "JointType")
                        .WithMany()
                        .HasForeignKey("JointType_ID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Reftables.WeldGOST14098", "WeldGOST14098")
                        .WithMany()
                        .HasForeignKey("WeldGOST14098_ID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartQA.DB.Models.Reftables.WeldingEquipmentAutomationLevel", "WeldingEquipmentAutomationLevel")
                        .WithMany()
                        .HasForeignKey("WeldingEquipmentAutomationLevel_ID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartQA.DB.Models.PermissionDocuments.DocumentNaksAttest_to_DetailsType", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Reftables.DetailsType", "DetailsType")
                        .WithMany()
                        .HasForeignKey("DetailsType_ID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartQA.DB.Models.PermissionDocuments.DocumentNaksAttest", "DocumentNaksAttest")
                        .WithMany("DocumentNaksAttest_to_DetailsTypeSet")
                        .HasForeignKey("DocumentNaksAttest_ID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.PermissionDocuments.DocumentNaksAttest_to_JointKind", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.PermissionDocuments.DocumentNaksAttest", "DocumentNaksAttest")
                        .WithMany("DocumentNaksAttest_to_JointKindSet")
                        .HasForeignKey("DocumentNaksAttest_ID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartQA.DB.Models.Reftables.JointKind", "JointKind")
                        .WithMany()
                        .HasForeignKey("JointKind_ID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.PermissionDocuments.DocumentNaksAttest_to_SeamsType", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.PermissionDocuments.DocumentNaksAttest", "DocumentNaksAttest")
                        .WithMany("DocumentNaksAttest_to_SeamsTypeSet")
                        .HasForeignKey("DocumentNaksAttest_ID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Reftables.SeamsType", "SeamsType")
                        .WithMany()
                        .HasForeignKey("SeamsType_ID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartQA.DB.Models.PermissionDocuments.DocumentNaksAttest_to_WeldMaterial", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.PermissionDocuments.DocumentNaksAttest", "DocumentNaksAttest")
                        .WithMany("DocumentNaksAttest_to_WeldMaterialSet")
                        .HasForeignKey("DocumentNaksAttest_ID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Reftables.WeldMaterial", "WeldMaterial")
                        .WithMany()
                        .HasForeignKey("WeldMaterial_ID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartQA.DB.Models.PermissionDocuments.DocumentNaksAttest_to_WeldMaterialGroup", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.PermissionDocuments.DocumentNaksAttest", "DocumentNaksAttest")
                        .WithMany("DocumentNaksAttest_to_WeldMaterialGroupSet")
                        .HasForeignKey("DocumentNaksAttest_ID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Reftables.WeldMaterialGroup", "WeldMaterialGroup")
                        .WithMany()
                        .HasForeignKey("WeldMaterialGroup_ID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartQA.DB.Models.PermissionDocuments.DocumentNaksAttest_to_WeldPosition", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.PermissionDocuments.DocumentNaksAttest", "DocumentNaksAttest")
                        .WithMany("DocumentNaksAttest_to_WeldPositionSet")
                        .HasForeignKey("DocumentNaksAttest_ID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Reftables.WeldPosition", "WeldPosition")
                        .WithMany()
                        .HasForeignKey("WeldPosition_ID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.AccessToPIStaffFunction", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.AccessToPIVoltageRange", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.AttCenterNaks", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.AuthToSignInspActsForWSUN", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.DetailsType", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.ElectricalSafetyAbilitation", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.HIFGroup", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.InspectionSubject", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.InspectionTechnique", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.JointKind", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.JointType", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.QualificationField", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.QualificationLevel", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.Responsibility", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.SeamsType", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.ShieldingGas", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.TestMethod", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.TestTypeRef", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.WeldGOST14098", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.WeldingEquipmentAutomationLevel", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.WeldMaterial", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.WeldMaterialGroup", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.WeldPasses", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.WeldPosition", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SmartQA.DB.Models.Reftables.WeldType", b =>
                {
                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Created_User")
                        .WithMany()
                        .HasForeignKey("Created_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartQA.DB.Models.Auth.AppUser", "Modified_User")
                        .WithMany()
                        .HasForeignKey("Modified_User_ID")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
