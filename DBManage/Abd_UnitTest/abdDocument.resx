<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="dbo_Document_DeleteTest_TestAction.SqlScript" xml:space="preserve">
    <value>-- database unit test for dbo.Document_Delete
DECLARE @RC AS INT, @i_AppUser_ID AS NVARCHAR (250), @i_Document_ID AS NVARCHAR (250), @o_IsError AS BIT;

SELECT @RC = 0,
       @i_AppUser_ID = NULL,
       @i_Document_ID = NULL;

EXECUTE @RC = [dbo].[Document_Delete] @i_AppUser_ID, @i_Document_ID, @o_IsError OUTPUT;

SELECT @RC AS RC,
       @o_IsError AS o_IsError;

</value>
  </data>
  <data name="dbo_Document_InsertTest_000_TestAction.SqlScript" xml:space="preserve">
    <value>
DECLARE @RC AS INT, @i_RowStatus AS NVARCHAR (250), @i_AppUser_ID AS NVARCHAR (250), @i_Document_Code AS NVARCHAR (250), @i_Document_Number AS NVARCHAR (250), @i_DocumentType_ID AS NVARCHAR (250), @i_Document_Date AS NVARCHAR (250), @i_Issue_Date AS NVARCHAR (250), @i_TotalSheets AS NVARCHAR (250), @i_Document_Name AS NVARCHAR (250), @i_Parent_ID AS NVARCHAR (250), @o_Entity_ID AS NVARCHAR (250), @o_IsError AS BIT;

SELECT @RC					= 0,
       @i_RowStatus			= 0,
       @i_AppUser_ID		= (select Entity_TableId from p_TestObject where TestObject_Code = 'AppUser_ID' and TestCode = 'Document_Insert + 01'),
       @i_Document_Code		= 'TST#Code_'+cast(newid() as nvarchar(36)),
       @i_Document_Number	= 'TST#Number_'+cast(newid() as nvarchar(36)),
       @i_DocumentType_ID	= (select Entity_TableId from p_TestObject where TestObject_Code = 'DocumentType_ID' and TestCode = 'Document_Insert + 01'),
       @i_Document_Date		= getdate(),
       @i_Issue_Date		= getdate(),
       @i_TotalSheets		= cast(cast(newid() as varbinary(4)) as tinyint),
       @i_Document_Name		= 'TST#Name_'+cast(newid() as nvarchar(36)),
       @i_Parent_ID			= (select Entity_TableId from p_TestObject where TestObject_Code = 'Parent_ID' and TestCode = 'Document_Insert + 01');

EXECUTE @RC = [dbo].[Document_Insert] @i_RowStatus, @i_AppUser_ID, @i_Document_Code, @i_Document_Number, @i_DocumentType_ID, @i_Document_Date, @i_Issue_Date, @i_TotalSheets, @i_Document_Name, @i_Parent_ID, @o_Entity_ID OUTPUT, @o_IsError OUTPUT;

SELECT @RC AS RC,
       @o_Entity_ID AS o_Entity_ID,
       @o_IsError AS o_IsError;

insert into p_TestObject(TestObject_Code,TestCode,TestId,Enity_Schema,Entity_Table,Entity_TableId)
select 'Document_ID', 'Document_Insert + 01', newid(), 'dbo', 'p_Document', @o_Entity_ID

select
	 @i_RowStatus			
	,@i_Document_Code		
	,@i_Document_Number	
	,@i_DocumentType_ID	
	,@i_Document_Date		
	,@i_Issue_Date		
	,@i_TotalSheets		
	,@i_Document_Name		
	,@i_Parent_ID			
except 
SELECT 
	 [RowStatus]
	,[Document_Code]
	,[Document_Number]
	,[DocumentType_ID]
	,[Document_Date]
	,[Issue_Date]
	,[TotalSheets]
	,[Document_Name]
	,[Parent_ID]
FROM dbo.[p_Document]
where [Document_ID] = @o_Entity_ID
</value>
  </data>
  <data name="dbo_Document_UpdateTest_TestAction.SqlScript" xml:space="preserve">
    <value>-- database unit test for dbo.Document_Update
DECLARE @RC AS INT, @i_Document_ID AS NVARCHAR (250), @i_RowStatus AS NVARCHAR (250), @i_AppUser_ID AS NVARCHAR (250), @i_Document_Code AS NVARCHAR (250), @i_Document_Number AS NVARCHAR (250), @i_DocumentType_ID AS NVARCHAR (250), @i_Document_Date AS NVARCHAR (250), @i_Issue_Date AS NVARCHAR (250), @i_TotalSheets AS NVARCHAR (250), @i_Document_Name AS NVARCHAR (250), @i_Parent_ID AS NVARCHAR (250), @o_IsError AS BIT;

SELECT @RC = 0,
       @i_Document_ID = NULL,
       @i_RowStatus = NULL,
       @i_AppUser_ID = NULL,
       @i_Document_Code = NULL,
       @i_Document_Number = NULL,
       @i_DocumentType_ID = NULL,
       @i_Document_Date = NULL,
       @i_Issue_Date = NULL,
       @i_TotalSheets = NULL,
       @i_Document_Name = NULL,
       @i_Parent_ID = NULL;

EXECUTE @RC = [dbo].[Document_Update] @i_Document_ID, @i_RowStatus, @i_AppUser_ID, @i_Document_Code, @i_Document_Number, @i_DocumentType_ID, @i_Document_Date, @i_Issue_Date, @i_TotalSheets, @i_Document_Name, @i_Parent_ID, @o_IsError OUTPUT;

SELECT @RC AS RC,
       @o_IsError AS o_IsError;

</value>
  </data>
  <data name="dbo_Document_InsertTest_000_PretestAction.SqlScript" xml:space="preserve">
    <value />
  </data>
  <data name="dbo_Document_InsertTest_000_PosttestAction.SqlScript" xml:space="preserve">
    <value>declare Cur cursor local fast_forward read_only for
	select Entity_TableId, Entity_Table, Enity_Schema from p_TestObject where TestCode = 'Document_Insert + 01' order by TestObject_ID desc
declare @Id uniqueidentifier, @TableName nvarchar(120) = '', @SchemaName nvarchar(120), @SQL nvarchar(max) = ''
open Cur
while 1=1 begin
	fetch next from Cur into @Id, @TableName, @SchemaName
	if @@fetch_status &lt;&gt; 0 break 
	select @SQL = 'delete from '+@SchemaName+'.'+@TableName+' where '+right(@TableName,len(@TableName)-2)+'_Id = '''+cast(@Id as nvarchar(36))+''''
	exec (@SQL)
end
close Cur deallocate Cur
delete from p_TestObject where TestCode = 'Document_Insert + 01'</value>
  </data>
  <metadata name="$this.Localizable" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
</root>